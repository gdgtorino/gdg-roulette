version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: event_management_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-eventuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-eventpass}
      POSTGRES_DB: ${POSTGRES_DB:-event_management}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-eventuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: event_management_redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: event_management_app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://eventuser:eventpass@postgres:5432/event_management}
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped

volumes:
  postgres_data: